#doctest_101-lazy_matrix_mul.txt
==================================
How to use 101-lazy_matrix_mul.txt
==================================

This library utilizes the function
``lazy_matrix_mul(m_a, m_b)``.

File ``101-lazy_matrix_mul.txt

Return: New matrix containing the result

Importing the function:
	>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test to realize:

	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
	 [15 22]]

	>>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
	[[13 16]]

	>>> print(lazy_matrix_mul([[3, -2], [1, 2]], [[1, 1], [1, 1]]))
	[[1 1]
	 [3 3]]

	>>> print(lazy_matrix_mul([[1.0, 1.0], [2.0, 2.0]], [[1, 1], [1, 1]]))
	[[2. 2.]
	 [4. 4.]]

	>>> print(lazy_matrix_mul("victor", [[2, 5]]))
	Traceback (most recent call last):
		...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> print(lazy_matrix_mul([[2, 5], [2, 4]], "Victor"))
	Traceback (most recent call last):
		...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> print(lazy_matrix_mul(["C is", "Fun"], [[50, 25]]))
	Traceback (most recent call last):
		...
	ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

	>>> print(lazy_matrix_mul([[7.5, 30]], ["C is", "Fun"]))
	Traceback (most recent call last):
		...
	TypeError: invalid data type for einsum

	>>> print(lazy_matrix_mul([], [[1.9, 90]]))
	Traceback (most recent call last):
		...
	ValueError: shapes (0,) and (1,2) not aligned: 0 (dim 0) != 1 (dim 0)

